Index: wear/src/main/res/layout/activity_main.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.wear.widget.BoxInsetLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    android:background=\"?CardBGColor\"\r\n    android:padding=\"9dp\"\r\n    tools:deviceIds=\"wear\">\r\n\r\n    <FrameLayout\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        app:layout_box=\"all\"\r\n        tools:ignore=\"MissingPrefix\">\r\n\r\n        <RelativeLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\"\r\n            tools:context=\".MainActivity\">\r\n\r\n            <LinearLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:orientation=\"vertical\">\r\n\r\n\r\n                <LinearLayout\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_marginTop=\"4dp\"\r\n                    android:orientation=\"vertical\"\r\n                    android:paddingTop=\"5dp\">\r\n\r\n                    <TextView\r\n                        android:id=\"@+id/sensordatatexttop\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_gravity=\"center\"\r\n                        android:layout_marginTop=\"2dp\"\r\n                        android:layout_marginBottom=\"2dp\"\r\n                        android:text=\"@string/sensorDataString\"\r\n                        android:textColor=\"#BBBB\"></TextView>\r\n\r\n                    <TextView\r\n                        android:id=\"@+id/sensordatatextmid\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_gravity=\"center\"\r\n                        android:layout_marginTop=\"2dp\"\r\n                        android:layout_marginBottom=\"2dp\"\r\n                        android:text=\"@string/sensorDataString\"\r\n                        android:textColor=\"#FFFF\"\r\n\r\n                        ></TextView>\r\n\r\n                    <TextView\r\n                        android:id=\"@+id/sensordatatextbot\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_gravity=\"center\"\r\n                        android:layout_marginTop=\"2dp\"\r\n                        android:layout_marginBottom=\"2dp\"\r\n                        android:text=\"@string/sensorDataString\"\r\n                        android:textColor=\"#BBBB\"\r\n                        ></TextView>\r\n                </LinearLayout>\r\n\r\n\r\n                <LinearLayout\r\n\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_gravity=\"center\"\r\n                    android:layout_marginTop=\"1dp\"\r\n                    android:layout_marginBottom=\"25dp\"\r\n                    android:gravity=\"center\"\r\n                    android:orientation=\"horizontal\">\r\n\r\n                    <LinearLayout\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_gravity=\"center\"\r\n                        android:layout_marginTop=\"1dp\"\r\n                        android:gravity=\"center\"\r\n                        android:orientation=\"horizontal\">\r\n\r\n                        <Button\r\n                            android:id=\"@+id/recordFallButton\"\r\n                            android:layout_width=\"92dp\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_gravity=\"center\"\r\n                            android:background=\"?attr/selectableItemBackground\"\r\n                            android:gravity=\"center\"\r\n                            android:maxLines=\"2\"\r\n                            android:scrollbars=\"vertical\"\r\n                            android:text=\"@string/record_fall\"\r\n                            android:textColor=\"?TextInfoColor\"\r\n                            android:textSize=\"10.5sp\"\r\n                            android:textStyle=\"bold\"\r\n                            android:visibility=\"visible\"\r\n                            tools:ignore=\"SmallSp,TouchTargetSizeCheck\" />\r\n                    </LinearLayout>\r\n\r\n                    <LinearLayout\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_gravity=\"center\"\r\n                        android:layout_marginTop=\"1dp\"\r\n                        android:gravity=\"center\"\r\n                        android:orientation=\"horizontal\">\r\n\r\n                        <Button\r\n                            android:id=\"@+id/recordNotFallButton\"\r\n                            android:layout_width=\"92dp\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_gravity=\"center\"\r\n                            android:background=\"?attr/selectableItemBackground\"\r\n                            android:gravity=\"center\"\r\n                            android:maxLines=\"2\"\r\n                            android:scrollbars=\"vertical\"\r\n                            android:text=\"@string/record_not_fall\"\r\n                            android:textColor=\"?TextInfoColor\"\r\n                            android:textSize=\"10.5sp\"\r\n                            android:textStyle=\"bold\"\r\n                            android:visibility=\"visible\"\r\n                            tools:ignore=\"SmallSp,TouchTargetSizeCheck\" />\r\n                    </LinearLayout>\r\n\r\n                </LinearLayout>\r\n                <TextView\r\n                    android:text=\"@string/mode\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"match_parent\"\r\n                    ></TextView>\r\n                <LinearLayout\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"match_parent\">\r\n\r\n                    <Button\r\n                        android:id=\"@+id/manualFallDetection\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_gravity=\"center\"\r\n                        android:text=\"@string/manualFallDetection\"\r\n                        android:textSize=\"10.5sp\"\r\n                        android:textStyle=\"bold\"\r\n                        android:visibility=\"visible\">\r\n                    </Button>\r\n                </LinearLayout>\r\n            </LinearLayout>\r\n\r\n        </RelativeLayout>\r\n\r\n    </FrameLayout>\r\n</androidx.wear.widget.BoxInsetLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/wear/src/main/res/layout/activity_main.xml b/wear/src/main/res/layout/activity_main.xml
--- a/wear/src/main/res/layout/activity_main.xml	(revision b506b68cebabd5eb94d9d93fcda0e981a5c797db)
+++ b/wear/src/main/res/layout/activity_main.xml	(date 1649668842890)
@@ -139,13 +139,15 @@
 
                     <Button
                         android:id="@+id/manualFallDetection"
-                        android:layout_width="wrap_content"
-                        android:layout_height="wrap_content"
+                        android:layout_width="90dp"
+                        android:layout_height="match_parent"
                         android:layout_gravity="center"
                         android:text="@string/manualFallDetection"
                         android:textSize="10.5sp"
                         android:textStyle="bold"
-                        android:visibility="visible">
+                        android:visibility="visible"
+                        android:layout_marginLeft="70dp"
+                        >
                     </Button>
                 </LinearLayout>
             </LinearLayout>
Index: wear/src/main/java/com/bharathvishal/messagecommunicationusingwearabledatalayer/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.bharathvishal.messagecommunicationusingwearabledatalayer\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.content.Context\r\nimport android.hardware.Sensor\r\nimport android.hardware.SensorEvent\r\nimport android.hardware.SensorEventListener\r\nimport android.hardware.SensorManager\r\nimport android.net.Uri\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.View\r\nimport android.widget.Button\r\nimport android.widget.ScrollView\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.wear.ambient.AmbientModeSupport\r\nimport androidx.wear.ambient.AmbientModeSupport.AmbientCallback\r\nimport com.bharathvishal.messagecommunicationusingwearabledatalayer.databinding.ActivityMainBinding\r\nimport com.google.android.gms.wearable.*\r\nimport java.nio.ByteBuffer\r\nimport java.nio.charset.StandardCharsets\r\n\r\nclass MainActivity : AppCompatActivity(), AmbientModeSupport.AmbientCallbackProvider,\r\n    DataClient.OnDataChangedListener,\r\n    MessageClient.OnMessageReceivedListener,\r\n    CapabilityClient.OnCapabilityChangedListener,\r\n    SensorEventListener {\r\n    var myAccelerometer : Sensor ?= null\r\n    var mySensorManager : SensorManager ?= null\r\n    var textviewCounter : Int = 0\r\n    private var activityContext: Context? = null\r\n\r\n    private lateinit var binding: ActivityMainBinding\r\n\r\n    private val TAG_MESSAGE_RECEIVED = \"receive1\"\r\n    private val APP_OPEN_WEARABLE_PAYLOAD_PATH = \"/APP_OPEN_WEARABLE_PAYLOAD\"\r\n\r\n    private var mobileDeviceConnected: Boolean = false\r\n    // Payload string items\r\n    private val wearableAppCheckPayloadReturnACK = \"AppOpenWearableACK\"\r\n\r\n    private val MESSAGE_ITEM_RECEIVED_PATH: String = \"/message-item-received\"\r\n\r\n\r\n    private var messageEvent: MessageEvent? = null\r\n    private var mobileNodeUri: String? = null\r\n\r\n    private lateinit var ambientController: AmbientModeSupport.AmbientController\r\n\r\n    private val MAX_COUNT = 6\r\n    private var sendableData: ByteArray = ByteArray(MAX_COUNT * 4)\r\n    private var count = 0\r\n    private var timeout = 0;\r\n    private var fall : String ?= null\r\n    private var recording : Boolean = false\r\n    private var recordingFall : Boolean = false\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        binding = ActivityMainBinding.inflate(layoutInflater)\r\n        val view = binding.root\r\n        setContentView(view)\r\n\r\n        mySensorManager = getSystemService(SENSOR_SERVICE) as SensorManager\r\n        myAccelerometer = mySensorManager!!.getDefaultSensor(Sensor.TYPE_ACCELEROMETER)\r\n\r\n        activityContext = this\r\n\r\n        // Enables Always-on\r\n        ambientController = AmbientModeSupport.attach(this)\r\n        binding.manualFallDetection.isActivated = false\r\n        binding.manualFallDetection.visibility = View.INVISIBLE\r\n\r\n\r\n        //On click listener for sendmessage button\r\n        binding.recordFallButton.setOnClickListener {\r\n            if (mobileDeviceConnected) {\r\n                if (sendableData.isNotEmpty()) {\r\n                    if (recording == false) {\r\n                        recordingFall = true\r\n                        recording = true\r\n                        binding.recordFallButton.text = \"Recording fall... \"\r\n\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        binding.recordNotFallButton.setOnClickListener {\r\n            if (mobileDeviceConnected) {\r\n                if (sendableData.isNotEmpty()) {\r\n                    if (recording == false) {\r\n                        recording = true\r\n                        binding.recordNotFallButton.text = \"Recording not fall... \"\r\n\r\n                    }else if(recording == true){\r\n                        binding.recordNotFallButton.text = \"Record not fall \"\r\n                        recording = false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private fun floatToByteArray (value: Float): ByteArray {\r\n        var returnValue:ByteArray = ByteBuffer.allocate(4).putFloat(value).array()\r\n        return returnValue\r\n    }\r\n    var textBuffer = arrayOf(\" \", \" \", \" \")\r\n\r\n\r\n    @SuppressLint(\"SetTextI18n\")\r\n    override fun onSensorChanged(p0: SensorEvent?) {\r\n        if (textviewCounter == 3){\r\n            textviewCounter = 0\r\n        }\r\n        if ((p0 != null) && (p0.sensor.type == Sensor.TYPE_ACCELEROMETER) && (recording == true)) {\r\n            val i = textviewCounter\r\n            storeData(p0)\r\n            if (textviewCounter == 0) {\r\n                textBuffer[i] = \"Accelerometer: \" + p0.values[0].toString() + \", \" + p0.values[1].toString() + \", \" + p0.values[2].toString()\r\n                textviewCounter++\r\n            }else{\r\n                textviewCounter++\r\n                textBuffer[i] = \"Accelerometer: \" + p0.values[0].toString() + \", \" + p0.values[1].toString() + \", \" + p0.values[2].toString()\r\n            }\r\n            if (textviewCounter == 0) {\r\n                binding.sensordatatexttop.text = textBuffer[0]\r\n            }\r\n            if (textviewCounter == 1) {\r\n                binding.sensordatatextmid.text = textBuffer[1]\r\n            }\r\n            if (textviewCounter  == 2) {\r\n                binding.sensordatatextbot.text = textBuffer[2]\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onAccuracyChanged(p0: Sensor?, p1: Int) {\r\n    }\r\n\r\n    private fun storeData(p0: SensorEvent){\r\n        timeout += 1\r\n        if (timeout == 100){\r\n            if (count < MAX_COUNT){\r\n                for (value in 0..p0.values.size-1){\r\n                    Log.d(\"Sensor value \" + value.toString(), p0.values[value].toString())\r\n                    for (some in 0..3){\r\n                        sendableData[some + count * 4] = floatToByteArray(p0.values[value])[some]\r\n                    }\r\n                    count += 1\r\n                }\r\n            }else{\r\n                Log.d(\"sendable data size\", sendableData.size.toString())\r\n                sendData(sendableData)\r\n                var buffer = ByteBuffer.wrap(sendableData)\r\n                var debug: FloatArray = FloatArray(6)\r\n                for (i in 0..5){\r\n                    debug[i] = buffer.getFloat()\r\n                    Log.d(\"debug float \" + i.toString(), debug[i].toString())\r\n                }\r\n                buffer.clear()\r\n                count = 0\r\n            }\r\n            timeout = 0\r\n        }\r\n    }\r\n\r\n    @SuppressLint(\"SetTextI18n\")\r\n    private fun sendData(data:ByteArray){\r\n        if (mobileDeviceConnected) {\r\n            val debugString = String(data)\r\n            Log.d(\"data is not empty\", debugString)\r\n            if (data.isNotEmpty()) {\r\n                val nodeId: String = messageEvent?.sourceNodeId!!\r\n                // Set the data of the message to be the bytes of the Uri.\r\n                val payload: ByteArray = data\r\n                val debugString1 = String(data)\r\n                Log.d(\"payload\", debugString1)\r\n                // Send the rpc\r\n                // Instantiates clients without member variables, as clients are inexpensive to\r\n                // create. (They are cached and shared between GoogleApi instances.)\r\n                val sendMessageTask =\r\n                    Wearable.getMessageClient(activityContext!!)\r\n                        .sendMessage(nodeId, MESSAGE_ITEM_RECEIVED_PATH, payload)\r\n\r\n                sendMessageTask.addOnCompleteListener {\r\n                    if (it.isSuccessful) {\r\n                        Log.d(\"send1\", \"Message sent successfully\")\r\n                        val sbTemp = StringBuilder()\r\n                        sbTemp.append(\"\\n\")\r\n\r\n                        sbTemp.append(\" (Sent to mobile)\")\r\n                        Log.d(\"receive1\", \" $sbTemp\")\r\n\r\n                    } else {\r\n                        Log.d(\"send1\", \"Message failed.\")\r\n                    }\r\n                }\r\n            } else {\r\n                Toast.makeText(\r\n                    activityContext,\r\n                    \"Data object is empty.\",\r\n                    Toast.LENGTH_SHORT\r\n                ).show()\r\n            }\r\n        }\r\n        if (recordingFall ==true ){\r\n            recordingFall = false\r\n            recording = false\r\n            binding.recordFallButton.text = \"Record fall\"\r\n        }\r\n    }\r\n\r\n\r\n    override fun onDataChanged(p0: DataEventBuffer) {\r\n    }\r\n\r\n    override fun onCapabilityChanged(p0: CapabilityInfo) {\r\n    }\r\n\r\n\r\n    @SuppressLint(\"SetTextI18n\")\r\n    override fun onMessageReceived(p0: MessageEvent) {\r\n        try {\r\n            Log.d(TAG_MESSAGE_RECEIVED, \"onMessageReceived event received\")\r\n            val s1 = String(p0.data, StandardCharsets.UTF_8)\r\n            val messageEventPath: String = p0.path\r\n\r\n            Log.d(\r\n                TAG_MESSAGE_RECEIVED,\r\n                \"onMessageReceived() A message from watch was received:\"\r\n                        + p0.requestId\r\n                        + \" \"\r\n                        + messageEventPath\r\n                        + \" \"\r\n                        + s1\r\n            )\r\n\r\n            //Send back a message back to the source node\r\n            //This acknowledges that the receiver activity is open\r\n            if (messageEventPath.isNotEmpty() && messageEventPath == APP_OPEN_WEARABLE_PAYLOAD_PATH) {\r\n                try {\r\n                    // Get the node id of the node that created the data item from the host portion of\r\n                    // the uri.\r\n                    val nodeId: String = p0.sourceNodeId.toString()\r\n                    // Set the data of the message to be the bytes of the Uri.\r\n                    val returnPayloadAck = wearableAppCheckPayloadReturnACK\r\n                    val payload: ByteArray = returnPayloadAck.toByteArray()\r\n\r\n                    // Send the rpc\r\n                    // Instantiates clients without member variables, as clients are inexpensive to\r\n                    // create. (They are cached and shared between GoogleApi instances.)\r\n                    val sendMessageTask =\r\n                        Wearable.getMessageClient(activityContext!!)\r\n                            .sendMessage(nodeId, APP_OPEN_WEARABLE_PAYLOAD_PATH, payload)\r\n\r\n                    Log.d(\r\n                        TAG_MESSAGE_RECEIVED,\r\n                        \"Acknowledgement message successfully with payload : $returnPayloadAck\"\r\n                    )\r\n\r\n                    messageEvent = p0\r\n                    mobileNodeUri = p0.sourceNodeId\r\n\r\n                    sendMessageTask.addOnCompleteListener {\r\n                        if (it.isSuccessful) {\r\n                            Log.d(TAG_MESSAGE_RECEIVED, \"Message sent successfully\")\r\n\r\n\r\n                            val sbTemp = StringBuilder()\r\n                            sbTemp.append(\"\\nMobile device connected.\")\r\n                            Log.d(\"receive1\", \" $sbTemp\")\r\n\r\n\r\n                            mobileDeviceConnected = true\r\n\r\n\r\n                            binding.recordFallButton.visibility = View.VISIBLE\r\n\r\n\r\n                        } else {\r\n                            Log.d(TAG_MESSAGE_RECEIVED, \"Message failed.\")\r\n                        }\r\n                    }\r\n                } catch (e: Exception) {\r\n                    Log.d(\r\n                        TAG_MESSAGE_RECEIVED,\r\n                        \"Handled in sending message back to the sending node\"\r\n                    )\r\n                    e.printStackTrace()\r\n                }\r\n            }//emd of if\r\n            else if (messageEventPath.isNotEmpty() && messageEventPath == MESSAGE_ITEM_RECEIVED_PATH) {\r\n                try {\r\n                    val sbTemp = StringBuilder()\r\n                    sbTemp.append(\"\\n\")\r\n                    sbTemp.append(s1)\r\n                    sbTemp.append(\" - (Received from mobile)\")\r\n                    Log.d(\"receive1\", \" $sbTemp\")\r\n                } catch (e: Exception) {\r\n                    e.printStackTrace()\r\n                }\r\n            }\r\n        } catch (e: Exception) {\r\n            Log.d(TAG_MESSAGE_RECEIVED, \"Handled in onMessageReceived\")\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n\r\n    override fun onPause() {\r\n        super.onPause()\r\n        try {\r\n            Wearable.getDataClient(activityContext!!).removeListener(this)\r\n            Wearable.getMessageClient(activityContext!!).removeListener(this)\r\n            Wearable.getCapabilityClient(activityContext!!).removeListener(this)\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n        try {\r\n            mySensorManager!!.registerListener(this, myAccelerometer, SensorManager.SENSOR_DELAY_UI)\r\n            Wearable.getDataClient(activityContext!!).addListener(this)\r\n            Wearable.getMessageClient(activityContext!!).addListener(this)\r\n            Wearable.getCapabilityClient(activityContext!!)\r\n                .addListener(this, Uri.parse(\"wear://\"), CapabilityClient.FILTER_REACHABLE)\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    override fun getAmbientCallback(): AmbientCallback = MyAmbientCallback()\r\n\r\n    private inner class MyAmbientCallback : AmbientCallback() {\r\n        override fun onEnterAmbient(ambientDetails: Bundle) {\r\n            super.onEnterAmbient(ambientDetails)\r\n        }\r\n\r\n        override fun onUpdateAmbient() {\r\n            super.onUpdateAmbient()\r\n        }\r\n\r\n        override fun onExitAmbient() {\r\n            super.onExitAmbient()\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/wear/src/main/java/com/bharathvishal/messagecommunicationusingwearabledatalayer/MainActivity.kt b/wear/src/main/java/com/bharathvishal/messagecommunicationusingwearabledatalayer/MainActivity.kt
--- a/wear/src/main/java/com/bharathvishal/messagecommunicationusingwearabledatalayer/MainActivity.kt	(revision b506b68cebabd5eb94d9d93fcda0e981a5c797db)
+++ b/wear/src/main/java/com/bharathvishal/messagecommunicationusingwearabledatalayer/MainActivity.kt	(date 1649668842894)
@@ -92,7 +92,8 @@
                     if (recording == false) {
                         recording = true
                         binding.recordNotFallButton.text = "Recording not fall... "
-
+                        binding.manualFallDetection.isActivated = true
+                        binding.manualFallDetection.visibility = View.VISIBLE
                     }else if(recording == true){
                         binding.recordNotFallButton.text = "Record not fall "
                         recording = false
@@ -100,7 +101,9 @@
                 }
             }
         }
+        binding.manualFallDetection
     }
+
 
 
     private fun floatToByteArray (value: Float): ByteArray {
Index: wear/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><resources>\r\n    <string name=\"app_name\">Message communication using Wearable Data Layer</string>\r\n    <!--\r\n    This string is used for square devices and overridden by hello_world in\r\n    values-round/strings.xml for round devices.\r\n    -->\r\n    <string name=\"hello_world\">Hello Square World!</string>\r\n    <string name=\"mobile_device_is_connected\">Mobile device not paired</string>\r\n    <string name=\"mobile_message\">Mobile message</string>\r\n    <string name=\"phone_message\">Phone Message</string>\r\n    <string name=\"message\">Message Content</string>\r\n    <string name=\"message_log\">Message log</string>\r\n    <string name=\"init\">...</string>\r\n    <string name=\"record_fall\">Record fall</string>\r\n    <string name=\"record_not_fall\">Record not fall</string>\r\n    <string name=\"sensorDataString\">Sensor output</string>\r\n    <string name=\"manualFallDetection\">Manual Detection</string>\r\n    <string name=\"setmode\">Mode</string>\r\n    <string name=\"mode\">Mode:</string>\r\n</resources>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/wear/src/main/res/values/strings.xml b/wear/src/main/res/values/strings.xml
--- a/wear/src/main/res/values/strings.xml	(revision b506b68cebabd5eb94d9d93fcda0e981a5c797db)
+++ b/wear/src/main/res/values/strings.xml	(date 1649668842898)
@@ -14,7 +14,7 @@
     <string name="record_fall">Record fall</string>
     <string name="record_not_fall">Record not fall</string>
     <string name="sensorDataString">Sensor output</string>
-    <string name="manualFallDetection">Manual Detection</string>
+    <string name="manualFallDetection">Manual Detect</string>
     <string name="setmode">Mode</string>
     <string name="mode">Mode:</string>
 </resources>
